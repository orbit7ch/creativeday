# Generated by Django 2.0.6 on 2019-10-17 11:32

import cms.blocks
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import modelcluster.contrib.taggit
import modelcluster.fields
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.documents.blocks
import wagtail.images.blocks
import wagtail.images.models
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='CmsImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('file_hash', models.CharField(blank=True, editable=False, max_length=40)),
                ('rating', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('all_tags_str', models.TextField(blank=True, null=True)),
                ('all_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), default=[], size=None)),
                ('styles_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), default=[], size=None)),
                ('parts_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), default=[], size=None)),
                ('minor_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), default=[], size=None)),
                ('url_200x200', models.CharField(blank=True, max_length=1024, null=True)),
                ('url_800x800', models.CharField(blank=True, max_length=1024, null=True)),
                ('url_400x400', models.CharField(blank=True, max_length=1024, null=True)),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='CmsRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='cms.CmsImage')),
            ],
        ),
        migrations.CreateModel(
            name='Companies',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('menu_position', models.CharField(blank=True, choices=[('main', 'Main Menu'), ('minor', 'Minor Menu')], default=None, max_length=255, null=True)),
                ('hide_for_search_engines', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CompanyPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('menu_position', models.CharField(blank=True, choices=[('main', 'Main Menu'), ('minor', 'Minor Menu')], default=None, max_length=255, null=True)),
                ('hide_for_search_engines', models.BooleanField(default=False)),
                ('name', models.TextField()),
                ('street', models.TextField()),
                ('zip', models.TextField()),
                ('city', models.TextField()),
                ('bio', models.TextField(blank=True, null=True)),
                ('latitude', models.DecimalField(decimal_places=10, max_digits=14)),
                ('longitude', models.DecimalField(decimal_places=10, max_digits=14)),
                ('portrait', wagtail.core.fields.StreamField([('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())], icon='picture'))])),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='OperatorPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('menu_position', models.CharField(blank=True, choices=[('main', 'Main Menu'), ('minor', 'Minor Menu')], default=None, max_length=255, null=True)),
                ('hide_for_search_engines', models.BooleanField(default=False)),
                ('pseudonym', models.TextField()),
                ('full_name', models.TextField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('portrait', wagtail.core.fields.StreamField([('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())], icon='picture'))])),
                ('portfolio', wagtail.core.fields.StreamField([('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())], icon='picture'))], blank=True, null=True)),
                ('reviews', wagtail.core.fields.StreamField([('review', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.TextBlock(required=False)), ('text', wagtail.core.blocks.TextBlock(required=False)), ('rating', wagtail.core.blocks.IntegerBlock(required=False))], icon='group'))], blank=True, null=True)),
                ('companies', modelcluster.fields.ParentalManyToManyField(blank=True, null=True, to='cms.CompanyPage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='OperatorPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='cms.OperatorPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cms_operatorpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Operators',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('menu_position', models.CharField(blank=True, choices=[('main', 'Main Menu'), ('minor', 'Minor Menu')], default=None, max_length=255, null=True)),
                ('hide_for_search_engines', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('menu_position', models.CharField(blank=True, choices=[('main', 'Main Menu'), ('minor', 'Minor Menu')], default=None, max_length=255, null=True)),
                ('hide_for_search_engines', models.BooleanField(default=False)),
                ('heading_alignment', models.CharField(choices=[('left', 'Left'), ('center', 'Center')], default='left', max_length=24)),
                ('content', wagtail.core.fields.StreamField([('hero', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('background_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.TextBlock(required=False)), ('button_page', wagtail.core.blocks.PageChooserBlock(required=False)), ('button_text', wagtail.core.blocks.TextBlock(required=False)), ('use_img_overlay', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('show_logo', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('slides_interval', wagtail.core.blocks.IntegerBlock(default=0, help_text='The duration between slide cycles (in milliseconds, use 0 for no transition)')), ('slides', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('image', wagtail.documents.blocks.DocumentChooserBlock()), ('text', wagtail.core.blocks.TextBlock(required=False))], label='slides'), required=False))], icon='pick')), ('herotext', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('background_image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'bold', 'italic', 'link', 'ul'], required=False)), ('button_link', wagtail.core.blocks.PageChooserBlock(required=False)), ('button_text', wagtail.core.blocks.TextBlock(required=False)), ('use_img_overlay', wagtail.core.blocks.BooleanBlock(default=True, required=False))], icon='pick')), ('text', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('text', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'bold', 'italic', 'link', 'ul']))], icon='pilcrow')), ('button', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('text', wagtail.core.blocks.TextBlock(required=True)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('search_text', wagtail.core.blocks.CharBlock(required=False))], icon='media')), ('swiper', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('images', wagtail.core.blocks.ListBlock(cms.blocks._ServiceItem))], icon='code')), ('carousel', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('images', wagtail.core.blocks.ListBlock(cms.blocks._ServiceItem))], icon='code')), ('tiles', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('images', wagtail.core.blocks.ListBlock(cms.blocks._ServiceItem))], icon='grip')), ('image', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('image', wagtail.images.blocks.ImageChooserBlock())], icon='picture')), ('logo', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('text', wagtail.core.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'bold', 'italic', 'link', 'ul'], required=False)), ('style', wagtail.core.blocks.ChoiceBlock(choices=[('light', 'Light'), ('dark', 'Dark')]))], icon='radio-full')), ('more', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')]))], icon='plus-inverse')), ('icon', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('document', wagtail.documents.blocks.DocumentChooserBlock())], icon='picture')), ('form', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('form_name', wagtail.core.blocks.CharBlock(required=True)), ('confirmation_message', wagtail.core.blocks.TextBlock(default='Danke für deine Anfrage', required=True)), ('show_name', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('show_email', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('show_phone', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('show_message', wagtail.core.blocks.BooleanBlock(default=True, required=False))], icon='mail')), ('pagecontent', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('page', wagtail.core.blocks.PageChooserBlock(required=False))], icon='placeholder')), ('avatar', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('image', wagtail.images.blocks.ImageChooserBlock()), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('text', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ul']))], icon='user')), ('search', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('use_endless_scrolling', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('show_text_search', wagtail.core.blocks.BooleanBlock(default=True, required=False)), ('initial_search', wagtail.core.blocks.TextBlock(required=False)), ('tags', wagtail.core.blocks.ListBlock(wagtail.core.blocks.TextBlock())), ('filters', wagtail.core.blocks.ListBlock(cms.blocks._FilterItem))], icon='search')), ('textsearch', wagtail.core.blocks.StructBlock([('space_after', wagtail.core.blocks.ChoiceBlock(choices=[('pb-0', 'None'), ('pb-2', 'Small'), ('pb-4', 'Medium'), ('pb-5', 'Large')])), ('page', wagtail.core.blocks.PageChooserBlock(required=False))], icon='search'))])),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='UserSearchTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('fields', django.contrib.postgres.fields.jsonb.JSONField()),
                ('session_id', models.CharField(blank=True, max_length=512, null=True)),
                ('ga_id', models.CharField(blank=True, max_length=512, null=True)),
                ('is_internal', models.BooleanField(default=False)),
                ('reported', models.BooleanField(default=False)),
                ('nbr_results', models.IntegerField(default=0)),
                ('has_results', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='operatorpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='cms.OperatorPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AlterUniqueTogether(
            name='cmsrendition',
            unique_together={('image', 'filter_spec', 'focal_point_key')},
        ),
    ]
